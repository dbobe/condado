// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  profilePictureUrl String?
  email             String    @unique
  password          String
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  memberships Membership[]
  Contact     Contact[]
  Partner     Partner[]
}

model Company {
  id               String       @id @default(cuid())
  // Company information
  name             String
  slug             String       @unique
  logoUrl          String?
  websiteUrl       String?
  // Company branding
  primaryColor     String?
  secondaryColor   String?
  // Company type and relationships
  isPrimary        Boolean      @default(false)
  // Self-relation to primary company
  primaryCompanyId String?
  primaryCompany   Company?     @relation("CompanyToPrimaryCompany", fields: [primaryCompanyId], references: [id])
  // Subsidiaries
  subsidiaries     Company[]    @relation("CompanyToSubsidiary")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Membership       Membership[]
  primaryCompanies Company[]    @relation("CompanyToPrimaryCompany")
  subsidiaryOf     Company[]    @relation("CompanyToSubsidiary")

  // @@unique([isPrimary, primaryCompanyId])
  Partner Partner[]
}

model Membership {
  id        String      @id @default(cuid())
  userRole  UserRole
  role      SystemRoles @relation(fields: [roleId], references: [id])
  roleId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SystemRoles {
  id          Int          @id @default(autoincrement())
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Membership  Membership[]
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

model Partner {
  id               String           @id @default(cuid())
  company          Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
  companyName      String
  email            String?
  website          String?
  phone            String?
  fax              String?
  country          String?
  notes            String?          @db.Text
  salesRep         User?            @relation(fields: [salesRepId], references: [id])
  salesRepId       String?
  isActive         Boolean          @default(true)
  logoUrl          String?
  logoName         String?
  isBuilder        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contacts         Contact[]
  partnerAddresses PartnerAddress[]
}

enum ContactType {
  Customer
  Supplier
}

model Contact {
  id             String      @id @default(cuid())
  partner        Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId      String
  salutation     String?
  firstName      String
  lastName       String
  position       String?
  phone          String?
  extension      String?
  mobile         String?
  fax            String?
  email          String
  defaultContact Boolean     @default(false)
  notes          String?     @db.Text
  type           ContactType
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  isDeleted      Boolean     @default(false)
  deletedBy      User?       @relation(fields: [deletedById], references: [id])
  deletedById    String?
  deletedAt      DateTime?
}

model PartnerAddress {
  id           String        @id @default(cuid())
  partner      Partner       @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId    String
  description  String
  address1     String
  address2     String?
  city         String
  zip          String
  state        CountryState? @relation(fields: [stateId], references: [id])
  stateId      Int?
  country      Country       @relation(fields: [countryId], references: [id])
  countryId    String
  isDefault    Boolean       @default(false)
  notes        String?       @db.Text
  billTo       Boolean       @default(false)
  shipTo       Boolean       @default(false)
  isDeleted    Boolean       @default(false)
  isJobAddress Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Country {
  id             String           @id @db.VarChar(4)
  name           String
  id_2           String?
  id_int         Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PartnerAddress PartnerAddress[]
  CountryState   CountryState[]
}

model CountryState {
  id             Int              @id @default(autoincrement())
  name           String
  abbreviation   String?
  country        Country          @relation(fields: [countryId], references: [id])
  countryId      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PartnerAddress PartnerAddress[]
}
